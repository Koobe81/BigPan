#!/usr/bin/env python
# -*- coding:utf-8 -*-
# author: prayer time:2020/5/5
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split


def load_data(path, train_size, random_state):
    data = pd.read_csv(path, encoding='UTF-8')
    x = data.iloc[:, 0:4]
    y = data.iloc[:, 5]
    # 对数据进行标准化
    x = (x - x.mean()) / np.std(x)
    y = (y - y.mean()) / np.std(y)
    # 对数据进行分割
    x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=train_size, random_state=random_state)
    return x, y, x_train, x_test, y_train, y_test


def gen_pca(y, x_train, x_test, y_train):
    pca = PCA(n_components='mle')
    pca.fit(x_train)
    x_train = pca.transform(x_train)
    x_test = (x_test-x_test.mean())/np.std(x_test)
    x_test = pca.transform(x_test)
    y_test = (y_train-y_train.mean())/np.std(y)
    print('降维后各主成分比例', pca.explained_variance_ratio_)


def regre_model(x_train, x_test, y_train):
    lr = LinearRegression()
    lr.fit(x_train, y_train)
    lr.score(x_train, y_train)
    ols = sm.OLS(y_train, x_train).fit()
    y_pred = lr.predict(x_test)
    print('预测结果：', y_pred)
    olsr = sm.OLS(y_pred, y_test).fit()
    return y_pred


def draw_regre(y_pred, y_test):
    plt.scatter(y_pred, y_test)
    plt.xlabel('The predicted Y of LinearRegression')
    plt.ylabel('The rear Y')
    plt.show()


if __name__ == "__main__":
    path = r'C:\\Users\\Administrator\\Desktop\\data.csv'
    x, y, x_train, x_test, y_train, y_test = load_data(path, 0.7, 1)
    gen_pca(y, x_train, x_test, y_train)
    y_pred = regre_model(x_train,x_test,y_train)
    draw_regre(y_pred, y_test)



